<?php

namespace backend\modules\app\models;

use common\base\api\ActiveRecord;
use common\components\FApi;
use common\components\FConstant;
use common\components\FFile;
use Yii;
use yii\web\IdentityInterface;
use yii\web\NotFoundHttpException;

/**
 * @property integer $id
 * @property string $avatar
 * @property string $name
 * @property string $username
 * @property string $email
 * @property string $password
 * @property integer $auth_id
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $description
 * @property string $content
 * @property string $gender
 * @property string $dob
 * @property string $phone
 * @property string $address
 * @property string $city
 * @property string $state
 * @property string $country
 * @property integer $role
 * @property string $type
 * @property string $status
 * @property integer $is_online
 * @property integer $is_active
 * @property string $created_date
 * @property string $modified_date
 *
 * @property AppDeviceAPI[] $devices
 * @property AppTokenAPI $loginToken
 *
 * @property Auth $auth
 * @property AppMetaAPI[] $metas
 *
 */
class AppUserAPI extends ActiveRecord implements IdentityInterface
{
    const ROLE_USER = 1;
    const ROLE_MODERATOR = 2;
    const ROLE_ADMIN = 0;

    const GENDER_MALE = 'male';
    const GENDER_FEMALE = 'female';
    const GENDER_OTHER = 'other';
    const TYPE_NORMAL = 'normal';
    const TYPE_VIP = 'vip';
    const TYPE_STAFF = 'staff';
    const STATUS_NORMAL = 'normal';
    const STATUS_BAN = 'ban';
    const STATUS_PENDING = 'pending';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'app_user';
    }

    public function fields()
    {
        $fields = parent::fields(); // TODO: Change the autogenerated stub
        $folder = FFile::getUploadFolderName($this::tableName());
        $avatar = FApi::getImageUrlForAPI($this->avatar, $folder);
        $this->avatar = $avatar;
        return $fields;
    }

    public function apiFields()
    {
        //$fields = parent::apiFields(); // TODO: Change the autogenerated stub
        $fields = [
            'id',
            'avatar',
            'name',
            'username',
            'email',
            'description',
            'content',
            'gender',
            'dob',
            'phone',
            'address',
            'city',
            'state',
            'country',
            'role',
            'type',
            'status',
            'is_online',
            'is_active',
            'created_date',
            'modified_date'
        ];
        return $fields;
    }

    /**
     * @inheritdoc
     */
    public static function findByEmail($email)
    {
        return static::findOne(['email' => $email, 'is_active' => FConstant::STATE_ACTIVE]);
    }

    public static function findByUsername($username)
    {
        return static::findOne(['username' => $username, 'is_active' => FConstant::STATE_INACTIVE]);
    }

    /**
     * Finds user by password reset token
     *
     * @param string $token password reset token
     * @return static|null
     */
    public static function findByPasswordResetToken($token)
    {
        if (!static::isPasswordResetTokenValid($token)) {
            return null;
        }

        return static::findOne([
            'password_reset_token' => $token,
            'is_active' => FConstant::STATE_ACTIVE,
        ]);
    }

    /**
     * Finds out if password reset token is valid
     *
     * @param string $token password reset token
     * @return boolean
     */
    public static function isPasswordResetTokenValid($token)
    {
        if (empty($token)) {
            return false;
        }

        $timestamp = (int)substr($token, strrpos($token, '_') + 1);
        $expire = Yii::$app->params['user.passwordResetTokenExpire'];
        return $timestamp + $expire >= time();
    }

    /**
     * @inheritdoc
     */

    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        throw new NotFoundHttpException();
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->id;
    }

    public function getRole()
    {
        return $this->role;
    }

    public static function isAdmin($role)
    {
        return $role == self::ROLE_ADMIN;
    }

    public static function isModerator($role)
    {
        return $role == self::ROLE_MODERATOR;
    }

    public static function isNormalUser($role)
    {
        return $role == self::ROLE_USER;
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * @inheritdoc
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password);
    }

    /**
     * Generates password hash from password and sets it to the model
     *
     * @param string $password
     */
    public function setPassword($password)
    {
        $this->password = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey()
    {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * Generates new password reset token
     */
    public function generatePasswordResetToken()
    {
        $this->password_reset_token = Yii::$app->security->generateRandomString() . '_' . time();
    }

    /**
     * Removes password reset token
     */
    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }


    public static function findUser($username)
    {
        return static::findOne(['username' => $username, 'is_active' => FConstant::STATE_ACTIVE]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDevices()
    {
        return $this->hasMany(AppDeviceAPI::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLoginToken()
    {
        return $this->hasOne(AppTokenAPI::className(), ['user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAuth()
    {
        return $this->hasOne(Auth::className(), ['id' => 'auth_id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMetas()
    {
        return $this->hasMany(AppMetaAPI::className(), ['user_id' => 'id']);
    }

    public function afterDelete()
    {
        //$id = $this->id;
        $uploadFolder = Yii::getAlias('@' . UPLOAD_DIR);
        $folder = FFile::getUploadFolderName($this::tableName());
        $avatar_old = $this->avatar;
        if (strlen($avatar_old) > 0) {
            if (is_file($uploadFolder . '/' . $folder . '/' . $avatar_old)) {
                unlink($uploadFolder . '/' . $folder . '/' . $avatar_old);
            }
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }
}