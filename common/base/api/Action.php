<?php

namespace common\base\api;

use backend\modules\app\models\AppTokenAPI;
use common\components\FConstant;
use common\components\FHelper;
use common\components\FApi;
use common\models\User;
use Yii;

/**
 *
 * @property $is_secured boolean
 * @property $is_customized boolean
 *
 * @property $user_id integer
 * @property $user_role integer
 * @property $fields array
 * @property $model_fields array
 * @property $user object
 * @property $limit           integer
 * @property $offset          integer
 * @property $page          integer
 *
 * @property $checkAccess boolean
 *
 */

//vuejs  cross origin error
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: *');
header('Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept, Authorization');

class Action extends \yii\base\Action
{
    protected $is_secured = true;
    protected $is_customized = false;
    public $checkAccess;

    protected $user_id;
    protected $user_role = User::ROLE_USER;
    protected $user = NULL;
    protected $fields = [];
    protected $model_fields;

    protected $limit = -1;
    protected $action = 'list';
    protected $offset = 0;
    protected $page = 1;

    public function beforeRun()
    {
        $this->prepareParams();
        Yii::$app->response->statusCode = 200;
        return parent::beforeRun(); // TODO: Change the autogenerated stub
    }

    public function prepareParams()
    {
        $field_params = FHelper::getRequestParam(['fields', 'columns']);
        if (is_string($field_params)) {
            $this->fields = explode(',', $field_params);
        }
    }

    public function isAuthorized()
    {
        $error_code = 0;
        $token = FHelper::getRequestParam('login_token', '');
        if ($this->is_secured) {
            if (strlen($token) != 0) {
                /* @var $login_token AppTokenAPI */
                $login_token = AppTokenAPI::find()->where(['token' => $token])->one();
                if (isset($login_token)) {
                    if (isset ($login_token->user)) {
                        $this->user_id = $login_token->user->id;
                        $this->user_role = $login_token->user->role;
                        $this->user = $login_token->user;
                    } else {
                        $login_token->delete();
                        $error_code = 221;
                    }
                } else {
                    $error_code = 205;
                }
            } else {
                $error_code = 204;
            }
        } else {
            //NOT REQUIRED LOGIN
            if (strlen($token) != 0) {
                /* @var $login_token AppTokenAPI */
                $login_token = AppTokenAPI::find()->where(['token' => $token])->one();
                if (isset($login_token)) {
                    if (isset ($login_token->user)) {
                        $this->user_id = $login_token->user->id;
                        $this->user_role = $login_token->user->role;
                        $this->user = $login_token->user;
                    } else {
                        $login_token->delete();
                    }
                }
            }
        }

        return $error_code;
    }

    public function isExistedFields()
    {
        $error_code = 0;
        $fields = $this->fields;
        $model_fields = $this->model_fields;
        if ($this->is_customized) {
            if (empty($fields)) {
                $error_code = 202;
            } elseif (empty($model_fields)) {
                $error_code = 203;
            } else {
                if (!empty(array_diff($fields, $model_fields))) {
                    $error_code = 203;
                }
            }
        } else {
            if (!empty($fields) && !empty($model_fields)) {
                if (!empty(array_diff($fields, $model_fields))) {
                    $error_code = 203;
                }
            }
        }
        return $error_code;
    }

    public function initialRun()
    {
        $response = [];
        $code = 0;
        $checkAuthorize = $this->isAuthorized();
        if ($checkAuthorize != 0) {
            $code = $checkAuthorize;
        } else {
            $checkExisted = $this->isExistedFields();
            if ($checkExisted != 0) {
                $code = $checkExisted;
            }
        }
        if ($code != 0) {
            $response = FApi::getOutputForAPI('', FConstant::ERROR, FApi::getErrorMsg($code), ['code' => $code]);
        }
        return $response;
    }
}
